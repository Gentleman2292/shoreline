package com.momentum.impl.modules.exploit.antihunger;

import com.momentum.api.event.FeatureListener;
import com.momentum.asm.mixins.vanilla.accessors.ICPacketPlayer;
import com.momentum.impl.events.vanilla.network.OutboundPacketEvent;
import net.minecraft.network.play.client.CPacketEntityAction;
import net.minecraft.network.play.client.CPacketEntityAction.Action;
import net.minecraft.network.play.client.CPacketPlayer;

/**
 * @author linus
 * @since 02/20/2023
 */
public class OutboundPacketListener extends FeatureListener<AntiHungerModule, OutboundPacketEvent> {

    /**
     * Default constructor
     *
     * @param feature The associated feature
     */
    protected OutboundPacketListener(AntiHungerModule feature) {
        super(feature);
    }

    @Override
    public void invoke(OutboundPacketEvent event) {

        // packet for player updates
        if (event.getPacket() instanceof CPacketPlayer) {

            // spoof ground states
            // prevent the server from knowing when we are jumping
            if (feature.groundOption.getVal()) {

                // compatibility with elytras
                if (!mc.player.isRiding() && !mc.player.isElytraFlying()) {

                    // sets all packets to be considered as onGround
                    ((ICPacketPlayer) event.getPacket()).setOnGround(true);
                }
            }
        }

        // packet for sprinting
        else if (event.getPacket() instanceof CPacketEntityAction) {

            // FIX: issue #216 - old if statement was incorrectly casted to CPacketEntityAction when packet was actually CPacketAnimation
            CPacketEntityAction packet = (CPacketEntityAction) event.getPacket();

            // spoof sprint state
            // prevent the server from knowing when we are sprinting
            if (feature.sprintOption.getVal()) {

                // if we are starting to sprint - sprinting looses hunger faster
                if (packet.getAction() == Action.START_SPRINTING) {

                    // stops the client from sending sprint packets
                    feature.psprint = true;
                    event.setCanceled(true);
                }

                // stopping sprint
                else if (packet.getAction() == Action.STOP_SPRINTING) {

                    // stops the client from sending sprint packets
                    feature.psprint = false;
                    event.setCanceled(true);
                }
            }
        }
    }
}
